// -- WAJIB DIISI --
var token = "7849305390:AAEH2H2L4XPKL8lJwEiArlqIMfXsprnQ30Q"; // Ganti dengan token bot Anda
const adminBot = 123456789; // Ganti dengan ID Telegram Anda
const spreadsheetId = "10TupgRfroPas2SjNNY19Q4uB82AYGUVwIIisBxb9Mgg"; // Ganti dengan ID Google Sheet Anda
const sheetName = "sheet1"; // Ganti dengan nama sheet yang digunakan (opsional)

// -- KONFIGURASI --
const debug = false; // Set ke true untuk debugging (kirim struktur JSON ke admin)
const tg = new telegram.daftar(token);

// -- FUNGSI UTILITY --

function getSheet() {
    return SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName);
}

function logToSheet(data) { // Fungsi untuk log ke sheet (debugging)
  const sheet = getSheet();
  sheet.appendRow([new Date(), JSON.stringify(data)]);
}


// -- FUNGSI TELEGRAM (opsional, dari kode Anda) --

function getMe() {
    let me = tg.getMe();
    return Logger.log(me);
}

function setWebhook() {
    var url = ScriptApp.getService().getUrl(); // Dapatkan URL webhook otomatis
    var r = tg.setWebhook(url);
    return Logger.log(r);
}

function getWebhookInfo() {
    let hasil = tg.getWebhookInfo();
    return Logger.log(hasil);
}

function deleteWebhook() {
    let hasil = tg.deleteWebhook();
    return Logger.log(hasil);
}

// --- FUNGSI UTAMA BOT ---

function doPost(e) {
    try {
        const update = JSON.parse(e.postData.contents);

        if (debug) {
            tg.sendMessage(adminBot, JSON.stringify(update));  // Kirim data mentah ke admin
        }
       // logToSheet(update); // opsi lain log

        if (update.message) {
            handleMessage(update.message);
        } else if (update.inline_query) {
            handleInlineQuery(update.inline_query);
        }

    } catch (error) {
      tg.sendMessage(adminBot, "Error: " + error.toString());
      logToSheet(error); // opsi lain untuk log error
    }
}

function handleMessage(message) {
    const chatId = message.chat.id;
    const text = message.text;

    if (text === "/start") {
        // Buat keyboard inline
        const keyboard = [
            [{ text: "üîç Cari File", switch_inline_query_current_chat: "" }],
            [{ text: "‚ÑπÔ∏è Bantuan", callback_data: "help" }],
        ];
        const replyMarkup = { inline_keyboard: keyboard };

        tg.sendMessage(chatId, "Selamat datang!  Gunakan tombol di bawah untuk mencari file atau mendapatkan bantuan.", { reply_markup: replyMarkup });

    } else if (message.forward_from && message.forward_from.id === adminBot) {
        // Admin meneruskan pesan
        saveForwardedMessage(message);
        tg.sendMessage(chatId, "Pesan tersimpan!");
    }
     else if (message.document && chatId === adminBot) { // Admin upload file
      saveUploadedFile(message);
      tg.sendMessage(chatId, "File berhasil disimpan!");
    }
    else {
        // Pesan lain (tidak ditangani)
        tg.sendMessage(chatId, "Perintah tidak dikenali.");
    }
}

function handleInlineQuery(inlineQuery) {
    const queryId = inlineQuery.id;
    const queryText = inlineQuery.query.toLowerCase();
    const results = searchFiles(queryText); // Cari file berdasarkan query
    tg.answerInlineQuery(queryId, results, { cache_time: 10 });  // cache_time bisa disesuaikan
}

// --- FUNGSI PENYIMPANAN DATA ---
function saveUploadedFile(message) {
    const sheet = getSheet();
    const fileId = message.document.file_id;
    const fileName = message.document.file_name;
    sheet.appendRow([new Date(), "file", fileName, fileId, message.chat.id]);
}

function saveForwardedMessage(message) {
    const sheet = getSheet();
      let fileId = '';
    let fileName = '';

    if (message.document) {
        fileId = message.document.file_id;
        fileName = message.document.file_name;
    } else if(message.photo){ //untuk photo, ambil file_id yang paling besar (kualitas terbaik)
        fileId = message.photo[message.photo.length - 1].file_id;
        fileName = "photo_" + fileId;
    } else if(message.video){
        fileId = message.video.file_id;
        fileName = message.video.file_name || "video_" + fileId;
    }
     else if (message.text) {
        fileName = "text"; // atau sesuaikan dengan jenis pesan lain
    }
    // Tambahkan jenis pesan/media lain sesuai kebutuhan

    sheet.appendRow([new Date(), "forwarded", fileName , fileId, message.chat.id]);
}

// --- FUNGSI PENCARIAN ---

function searchFiles(query) {
    const sheet = getSheet();
    const data = sheet.getDataRange().getValues();
    const results = [];

    // Header diabaikan (baris pertama)
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const type = row[1]; // "file" atau "forwarded"
        const fileName = row[2].toLowerCase();
        const fileId = row[3];

        if (fileName.includes(query)) {
          let result = {};
            if(type === "file" || (type === "forwarded" && fileName.startsWith("photo_")) ){
               result = {
                    type: "photo",
                    id: Utilities.base64Encode(fileId), // ID unik untuk hasil inline
                    photo_file_id: fileId,
                    title: fileName
                };
            } else if (type === "forwarded" && fileName.startsWith("video_")){
                 result = {
                    type: "video",
                    id: Utilities.base64Encode(fileId),
                    video_file_id: fileId,
                    title: fileName
                };
            }
              else if(type === "forwarded" && fileName){ //untuk text dan file
                result = {
                  type: "article", // Gunakan article untuk pesan teks
                  id: Utilities.base64Encode(fileId + i),  //ID harus unik, jadi tambahkan index baris
                  title: fileName,
                  input_message_content: {
                    message_text: `File: ${fileName}\nFile ID: ${fileId}`,

                  }
                };
                //jika ingin mengirimkan file dari forwarded text
                /*
                input_message_content: {
                    message_text: `/get ${fileId}`,
                  }
                */
              }


            if(Object.keys(result).length > 0) { //cek result kosong atau tidak
              results.push(result);
            }
            if(results.length >= 50) break; // Batasi hasil (maks 50)
        }
    }

    return results;
}


//--- Callback Query Handler (untuk tombol Bantuan, dll.) --
function handleCallbackQuery(callbackQuery) {
  const queryId = callbackQuery.id;
  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;

  if (data === "help") {
    tg.answerCallbackQuery(queryId, { text: "Ini adalah pesan bantuan.  Anda bisa menambahkan instruksi penggunaan bot di sini.", show_alert: true });
    // Atau, kirim pesan terpisah
    // tg.sendMessage(chatId, "Ini pesan bantuan...");
  }
}
