// --- Konfigurasi ---
var token = "7849305390:AAEH2H2L4XPKL8lJwEiArlqIMfXsprnQ30Q";          // Ganti dengan token bot Anda
const adminBot = 2109541199;        // Ganti dengan ID Telegram Anda
const spreadsheetId = "10TupgRfroPas2SjNNY19Q4uB82AYGUVwIIisBxb9Mgg"; // Ganti dengan ID Google Sheet Anda
const debug = false;

// --- Inisialisasi Library Telegram ---
const tg = new telegram.daftar(token); // Ini memanggil library telegram.gs

// --- Fungsi Telegram (Tidak Berubah) ---
function getMe() { let me = tg.getMe(); return Logger.log(me); }
function setWebhook() { var url = "yourwebhooklink"; var r = tg.setWebhook(url); return Logger.log(r); }
function getWebhookInfo() { let hasil = tg.getWebhookInfo(); return Logger.log(hasil); }
function deleteWebhook() { let hasil = tg.deleteWebhook(); return Logger.log(hasil); }

// --- Fungsi doPost (Entry Point) ---
function doPost(e) {
    if (debug) { tg.sendMessage(adminBot, JSON.stringify(e, null, 2)); }
    let update = JSON.parse(e.postData.contents);

    if (update.inline_query) { handleInlineQuery(update.inline_query); }
    else if (update.message) { handleMessage(update.message); }
    else if (update.callback_query) { handleCallbackQuery(update.callback_query); }
    else if (update.chosen_inline_result) { handleChosenInlineResult(update.chosen_inline_result); }
}

// --- Handler Pesan ---
function handleMessage(message) {
    let chatId = message.chat.id;
    let text = message.text;
    let user = message.from;

    if (text === "/start") { sendStartMessage(chatId, user); }
    else if (text === "/ping") { tg.sendMessage(chatId, "Pong!"); }
    else if (message.document) { processDocument(message); } // Proses dokumen
    // Handler untuk forward (HANYA di sini)
    else if (message.forward_from || message.forward_from_chat) {
        processForwardedMessage(message);
    }
}
// --- Handler Callback Query (Tombol) ---
function handleCallbackQuery(callbackQuery) {
    let chatId = callbackQuery.message.chat.id;
    let data = callbackQuery.data;
    let queryId = callbackQuery.id;
    if (data === "search_inline") { tg.answerCallbackQuery(queryId, "Silakan cari berkas..."); }
    else if (data === "help") {
        tg.answerCallbackQuery(queryId);
        tg.sendMessage(chatId, "Bot ini dapat mencari berkas... (pesan bantuan)");
    }
}

// --- Handler Inline Query ---
function handleInlineQuery(inlineQuery) {
    let queryId = inlineQuery.id;
    let queryText = inlineQuery.query;
    let results = searchInSheets(queryText);
    tg.answerInlineQuery(queryId, results);
}

// --- Handler Chosen Inline Result ---
function handleChosenInlineResult(chosenResult) {
    // Fungsi ini HANYA bertugas meneruskan file, TIDAK memproses pesan forward.
    let resultId = chosenResult.result_id;
    let userId = chosenResult.from.id;
    let fileId = getFileIdFromSheet(resultId);

    if (fileId) {
        // Periksa apakah fileId VALID
        if (fileId !== "" && fileId !== null && fileId !== undefined) {
            tg.sendDocument(userId, fileId);
        } else {
            tg.sendMessage(userId, "Maaf, file tidak ditemukan (fileId kosong).");
        }
    } else {
        tg.sendMessage(userId, "Maaf, file tidak ditemukan.");
    }
}

// --- Fungsi untuk mendapatkan file_id dari Sheet ---
function getFileIdFromSheet(rowNumber) {
    let ss = SpreadsheetApp.openById(spreadsheetId);
    let sheet = ss.getActiveSheet();
     // Tidak perlu +1, karena sekarang rowNumber adalah indeks langsung
    let fileId = sheet.getRange(Number(rowNumber), 6).getValue();
    return fileId;
}

// --- Fungsi /start ---
function sendStartMessage(chatId, user) {
    let fullName = (user.first_name || "") + " " + (user.last_name || "");
    let text = `Halo, ${fullName.trim()}! Selamat datang... (pesan sambutan)`;
     let keyboard = {
        inline_keyboard: [
            [{ text: "Cari Berkas", switch_inline_query_current_chat: "" }],
            [{ text: "Bantuan", callback_data: "help" }],
        ]
    };
    tg.sendMessage(chatId, text, null, null, null, null, JSON.stringify(keyboard));
}

// --- Fungsi Pemrosesan Dokumen (Hanya Admin, Multi-file) ---
function processDocument(message) {
    let chatId = message.chat.id;
    let fileId = message.document.file_id;
    let fileName = message.document.file_name;
     let mimeType = message.document.mime_type; // Dapatkan MIME type

    // --- VALIDASI ADMIN dan Private Chat--- (Tidak berubah)
    if (message.from.id !== adminBot || message.chat.type !== "private") {
        tg.sendMessage(chatId, "Maaf, hanya admin yang bisa mengupload file di private chat.");
        return;
    }

    let file = tg.getFile(fileId);
    let fileUrl = `https://api.telegram.org/file/bot${token}/${file.file_path}`;

    try {
        let response = UrlFetchApp.fetch(fileUrl);
        let content = response.getContentText(); //Hati-hati di sini.
        let blob = response.getBlob(); //Gunakan ini untuk file binary

         // --- PENANGANAN BERDASARKAN JENIS FILE ---
        if (mimeType === "text/csv") {
            // Proses file CSV
            let data = parseCSV(content);
            appendDataToSheet(data, fileId);
            tg.sendMessage(chatId, `File CSV "${fileName}" berhasil diunggah.`);

        } else if (mimeType === "application/pdf") {
            // Proses file PDF (contoh: simpan nama dan URL saja)
            let data = [[fileName, "PDF Document", fileUrl, "", "", fileId]];
             appendDataToSheet(data, fileId); //Simpan data tanpa di parsing
            tg.sendMessage(chatId, `File PDF "${fileName}" berhasil diunggah.`);

        } else if (mimeType === "application/vnd.ms-excel" || mimeType === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
            //Proses File Excel
             let data = processExcelFile(blob); //Implementasikan fungsi ini.
             appendDataToSheet(data,fileId);
              tg.sendMessage(chatId, `File Excel "${fileName}" berhasil diunggah.`);

        } else if (mimeType.startsWith("image/")) { //startsWith, untuk semua image
            // Proses gambar (contoh: simpan nama dan URL)
            let data = [[fileName, "Image", fileUrl, "", "", fileId]];
            appendDataToSheet(data,fileId);
            tg.sendMessage(chatId, `Gambar "${fileName}" berhasil diunggah.`);

        } else if (mimeType.startsWith("video/")) {
            // Proses video (contoh: simpan nama dan URL)
            let video = message.document;
            let fileName = video.file_name || "video.mp4"; // Beri nama default jika tidak ada
            let fileSize = video.file_size; // Ukuran file (dalam bytes)

            // Contoh: Simpan nama, URL, ukuran
            let data = [[fileName, "Video", fileUrl, `Size: ${fileSize} bytes`, "", fileId]];

            // Periksa Ukuran
            const MAX_BOT_API_SIZE = 50 * 1024 * 1024; // 50 MB in bytes
            if(fileSize > MAX_BOT_API_SIZE){
              tg.sendMessage(chatId, `File terlalu besar, maksimal ${MAX_BOT_API_SIZE / 1024 / 1024} MB`);
              return; //Hentikan eksekusi
            }

            appendDataToSheet(data, fileId);
            tg.sendMessage(chatId, `Video "${fileName}" berhasil diunggah.`);

        }else {
            // Jenis file lain (tidak didukung, atau simpan metadata saja)
             let data = [[fileName, mimeType, fileUrl, "", "", fileId]]; //Simpan MimeType
              appendDataToSheet(data,fileId);
            tg.sendMessage(chatId, `File "${fileName}" (jenis: ${mimeType}) berhasil diunggah. Pemrosesan khusus belum diimplementasikan.`);
        }

    } catch (error) {
        tg.sendMessage(chatId, `Terjadi kesalahan: ${error}`);
        if (debug) { tg.sendMessage(adminBot, `Error processDocument: ${error.stack}`); }
    }
}

//Contoh fungsi untuk memproses excel, install library jika belum
function processExcelFile(blob){
  //Gunakan library SpreadsheetApp
  let spreadsheet = SpreadsheetApp.open(blob);
  let sheet = spreadsheet.getActiveSheet(); // Ambil sheet pertama, atau sesuaikan
  return sheet.getDataRange().getValues();
}

// --- Fungsi untuk memproses pesan yang di-forward (opsional) ---
function processForwardedMessage(message) {
    let chatId = message.chat.id;

    // --- VALIDASI ADMIN ---
    if (message.from.id !== adminBot) {
        tg.sendMessage(chatId, "Maaf, hanya admin yang bisa menambahkan data.");
        return;
    }
    //Validasi hanya di private chat
    if (message.chat.type !== "private") {
        tg.sendMessage(chatId, "Maaf, upload file hanya bisa dilakukan di private chat.");
        return;
    }

    // Contoh: Jika pesan yang di-forward mengandung teks, simpan teks itu ke Sheet
    if (message.text) {
        // Format data (misalnya, [nama_file, deskripsi, url, keywords, kategori, file_id])
        let data = [message.text, "Forwarded message", "", "", "", ""]; // Sesuaikan
        appendDataToSheet(data, ""); // fileId kosong karena bukan dari upload file
         tg.sendMessage(chatId, "Pesan berhasil ditambahkan ke database.");
    } else {
         tg.sendMessage(chatId, "Maaf, format pesan yang di-forward tidak didukung.");
    }
}

// --- Fungsi Parsing CSV (Lebih Robust) ---
function parseCSV(csvText) {
    let lines = csvText.split(/\r\n|\n/);
    let result = [];
    for (let i = 1; i < lines.length; i++) { // Skip header
        let line = lines[i].trim();
        if (line) {
            let values = line.split(',');
             values = values.map(value => value.replace(/^"|"$/g, ''));
            result.push(values);
        }
    }
    return result;
}

// --- Fungsi Menyimpan ke Sheet ---
function appendDataToSheet(data, fileId) {
    let ss = SpreadsheetApp.openById(spreadsheetId);
    let sheet = ss.getActiveSheet();
    for(let i = 0; i<data.length; i++){
      let rowData = data[i];
      rowData.push(fileId); // Tambahkan fileId ke setiap baris
      sheet.appendRow(rowData);
    }
}

// --- Fungsi Pencarian di Sheet (dengan 'dummy' result) ---
function searchInSheets(query) {
    let ss = SpreadsheetApp.openById(spreadsheetId);
    let sheet = ss.getActiveSheet();
    let data = sheet.getDataRange().getValues();
    let results = [];
    let hasResults = false; // Flag untuk melacak apakah ada hasil

    for (let i = 1; i < data.length; i++) { // Mulai dari 1, abaikan header
        // Periksa apakah query cocok dengan salah satu kolom yang relevan.
        if (String(data[i][0]).toLowerCase().includes(query.toLowerCase()) ||  // Nama File
            String(data[i][1]).toLowerCase().includes(query.toLowerCase()) ||  // Deskripsi/Keterangan
            String(data[i][3]).toLowerCase().includes(query.toLowerCase()))    // Keywords (jika ada)
        {
            let fileUrl = data[i][2] || "";  // URL (jika ada)
            results.push({
                type: "document",
                id: String(i),  // Gunakan nomor baris sebagai ID (dimulai dari 1)
                title: data[i][0],  // Judul: Nama File
                document_file_id: data[i][5],  // File ID
                caption: data[i][0] + (fileUrl ? "\n" + fileUrl : ""),  // Caption: Nama File + URL
                description: data[i][1],  // Deskripsi: Keterangan (bisa dari kolom deskripsi atau jenis file)
            });
            hasResults = true;
        }
    }

    // Jika tidak ada hasil yang cocok, tambahkan satu hasil "dummy".
    if (!hasResults) {
        results.push({
            type: "article",  // Gunakan tipe "article" untuk pesan teks
            id: "no_results",
            title: "Tidak ada hasil",
            input_message_content: { message_text: "Maaf, tidak ada berkas yang cocok dengan pencarian Anda." },
        });
    }

    return results;
}
